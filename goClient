#!/usr/bin/env bash
# for linux client:

ansible-playbook deploy_client.yml -e 'client_ip=localhost vpn_user=dan server_ip=$ip ssh_user=dan'
apt-get install strongswan strongswan-plugin-openssl -y
cp ./algo/configs/*/pki/certs/dan.crt /etc/ipsec.d/certs/dan.crt
cp ./algo/configs/*/pki/private/dan.key /etc/ipsec.d/private/dan.key
cp ./algo/configs/*/pki/cacert.pem /etc/ipsec.d/cacerts/cacert.pem
cat ./algo/configs/*/pki/private/dan.key >>/etc/ipsec.secrets
cat ipsec_dan.conf >>/etc/ipsec.conf
ipsec restart # pick up config changes

#       ipsec up $connName                 # start the ipsec tunnel
#       ipsec down $connName               # shutdown the ipsec tunnel
# One common use case is to let your server access your local LAN without going through the VPN.
# Set up a passthrough connection by adding the following to /etc/ipsec.conf:
#cat /etc/ipsec.conf >>
#     conn lan-passthrough
#    leftsubnet=10.0.77.1/26 # Replace with your LAN subnet
#   rightsubnet=192.168.1.1/24 # Replac with your LAND subnet
#  authby=never            # No authentication necessary
#  type=pass               # passthrough
# auto=route              # no need to ipsec up lan-passthrough

# Other Devices- Depending on the platform, you may need one or multiple of the following files.
# cacert.pem: CA Certificate                                            user.mobileconfig: Apple Profile
# user.p12: User Certificate and Private Key (in PKCS#12 format)          user.sswan: Android strongSwan Profile
# ipsec_user.conf: strongSwan client configuration                        ipsec_user.secrets: strongSwan client configuration
# windows_user.ps1: Powershell script to help setup a VPN
# SSH TUNNEL
$ip=35.199.60.190
ssh -D 127.0.0.1:1080 -f -q -C -N dan@$ip -i configs/$ip/dan.ssh.pem
echo "Installation Complete."
